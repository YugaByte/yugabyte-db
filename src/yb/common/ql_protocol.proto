// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
syntax = "proto2";

package yb;

option java_package = "org.yb";

import "yb/common/common.proto";

// This is an internal protocol for communicating QL operations from a YB client to a tserver.
//
// Reference:
// Cassandra SQL doc - https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlCommandsTOC.html
// Usage notes - https://docs.google.com/document/d/1q9i7a9X5rDdTC0q8hNAqo9i9NyDh0n_Fhm5vdzmtBEw

// A QL value
message QLValuePB {
  // Note: an absent value means NULL
  oneof value {
    int32 int8_value = 1;  // Note: min int size in protobuf is int32
    int32 int16_value = 2;
    int32 int32_value = 3;
    int64 int64_value = 4;
    float float_value = 5;
    double double_value = 6;
    string string_value = 7;
    bool bool_value = 8;
    int64 timestamp_value = 9;
    bytes binary_value = 10;
    // raw bytes for inet address in network byte order.
    bytes inetaddress_value = 11;
    QLMapValuePB map_value = 12;
    QLSeqValuePB set_value = 13;
    QLSeqValuePB list_value = 14;
    bytes decimal_value = 15;
    bytes varint_value = 16;
    QLSeqValuePB frozen_value = 17;
    // raw bytes for uuid value.
    bytes uuid_value = 18;
    // raw bytes for timeuuid value.
    bytes timeuuid_value = 19;
    bytes jsonb_value = 20;
  }
}

// Sequence of values used to represent Lists and Sets (and later Tuples)
message QLSeqValuePB {
  repeated QLValuePB elems = 1;
}

message QLMapValuePB {
  repeated QLValuePB keys = 1;
  repeated QLValuePB values = 2;
}

// A column value, optionally with subscripts, e.g. m['x'] or l[2]['x']
message QLColumnValuePB {
  optional int32 column_id = 1;
  repeated QLExpressionPB subscript_args = 3;
  optional QLExpressionPB expr = 2;
}

// Reference to a subcolumn, e.g. m['x'] or l[2]['x']
message QLSubscriptedColPB {
  optional int32 column_id = 1;
  repeated QLExpressionPB subscript_args = 2;
}

// An expression in a WHERE condition
message QLExpressionPB {
  oneof expr {
    QLValuePB value = 1;
    int32 column_id = 2;
    QLSubscriptedColPB subscripted_col = 3;
    int32 bind_id = 4;                      // Bind variable index.
    QLConditionPB condition = 5;            // This should be replaced with builtin operator.
    QLBCallPB bfcall = 6;                   // Regular builtin calls.
    QLBCallPB tscall = 7;                   // Tablet server builtin calls.
    QLBCallPB bocall = 8;                   // Builtin operator calls.
  }
}

// Expression operators.
enum QLOperator {
  QL_OP_NOOP = 0;

  // Logic operators that take one operand.
  QL_OP_NOT = 1;
  QL_OP_IS_TRUE = 2;
  QL_OP_IS_FALSE = 3;

  // Logic operators that take two operands.
  QL_OP_AND = 4;
  QL_OP_OR = 5;

  // Relation operators that take one operand.
  QL_OP_IS_NULL = 6;
  QL_OP_IS_NOT_NULL = 7;

  // Relation operators that take two operands.
  QL_OP_EQUAL = 8;
  QL_OP_LESS_THAN = 9;
  QL_OP_LESS_THAN_EQUAL = 10;
  QL_OP_GREATER_THAN = 11;
  QL_OP_GREATER_THAN_EQUAL = 12;
  QL_OP_NOT_EQUAL = 13;

  QL_OP_LIKE = 14;
  QL_OP_NOT_LIKE = 15;
  QL_OP_IN = 16;
  QL_OP_NOT_IN = 17;

  // Relation operators that take three operands.
  QL_OP_BETWEEN = 18;
  QL_OP_NOT_BETWEEN = 19;

  // Operators that take no operand. For use in "if" clause only currently.
  QL_OP_EXISTS = 20;     // IF EXISTS
  QL_OP_NOT_EXISTS = 21; // IF NOT EXISTS
}

// A logical condition that evaluates to true/false. Used in the WHERE clause.
message QLConditionPB {
  optional QLOperator op = 1;
  repeated QLExpressionPB operands = 2;
}

// Builtin call expression. There are 3 different calls.
// - Builtin operators such as '>', '<', '=', ...
//   These operators can be executed anywhere.
// - Builtin functions such as Now().
//   These functions can be executed anywhere.
// - Server builtin functions.
//   Only tablet servers can execute these functions.
//
// TODO(neil) Regular builtin operators. This message can be executed anywhere.
// - This is more efficient than builtin call as it avoids most overheads of calling builtin lib.
// - Merge the current condition operator execution with this.
// - To optimize certain operation (such as +), replace it builtin function with builtin op.
message QLBCallPB {
  optional int32 opcode = 1;
  repeated QLExpressionPB operands = 2;
}

// Client type: only CQL client is supported currently
enum QLClient {
  YQL_CLIENT_CQL = 1;
}

// Paging state for continuing a read request.
//
// For a SELECT statement that returns many rows, the client may specify how many rows to return at
// most in each fetch. This paging state maintains the state for returning the next set of rows of
// the statement. This paging state is opaque to the client.
//
// When there should be more rows to return from the same tablet in the next fetch, "next_row_key"
// is populated in DocDB (QLReadOperation) with the DocKey of the next row to read. We also embed a
// hybrid-time which is the clean snapshot time for read consistency. We also populate the
// "next_partition_key" for the next row, which is the hash code of the hash portion of the DocKey.
// This next partition key is needed by YBClient (Batcher) to locate the tablet to send the request
// to and it doesn't have access to the DocDB function to decode and extract from the DocKey.
//
// When we are done returning rows from the current tablet and the next fetch should continue in
// the next tablet (possible only for full-table query across tablets), "next_partition_key" is
// populated by the current tablet with its exclusive partition-end key, which is the start key of
// next tablet's partition. "next_row_key" is empty in this case which means we will start from the
// very beginning of the next tablet. (TODO: we need to return the clean snapshot time in this case
// also).
//
message QLPagingStatePB {
  // Table UUID to verify the same table still exists when continuing in the next fetch.
  optional bytes table_id = 1;

  // Partition key to find the tablet server of the next row to read.
  optional bytes next_partition_key = 2;

  // The row key (SubDocKey = [DocKey + HybridTimestamp]) of the next row to read.
  optional bytes next_row_key = 3;

  // Running total number of rows read across fetches so far. Needed to ensure we read up to the
  // number of rows in the SELECT's LIMIT clause across fetches.
  optional uint64 total_num_rows_read = 4;

  // For selects with IN condition on the hash columns there are mutiple partitions that need to be
  // queried, one for each combination of allowed values for the hash columns.
  // This holds the index of the next partition and is used to resume the read from the right place.
  optional uint64 next_partition_index = 5;
}

//-------------------------------------- Column request --------------------------------------

// These columns must be read by DocDB before a read or write request can be executed.
message QLReferencedColumnsPB {
  repeated int32 ids = 1;
  repeated int32 static_ids = 2;
}

//-------------------------------------- Write request ---------------------------------------

message QLWriteRequestPB {

  // Statement types
  enum QLStmtType {
    QL_STMT_INSERT = 1;
    QL_STMT_UPDATE = 2;
    QL_STMT_DELETE = 3;
  }

  // Statement type
  optional QLStmtType type = 1; // required

  // Client info
  optional QLClient client = 2; // required
  optional uint64 request_id = 3; // client request id - for debug tracing purpose only

  // Table schema version
  optional uint32 schema_version = 4; // required

  // Primary key of the row to insert/update/delete - all fields required. The hashed and
  // range column values must be in the same order as the column order in the table schema.
  //
  // Note: the hash_code is the hash of the hashed_column_values. Technically, this can be
  // recomputed by tserver also, but since the client already calculates this to look up the
  // correct tablet server, it is passed in.
  optional uint32 hash_code = 5;
  repeated QLExpressionPB hashed_column_values = 6;
  repeated QLExpressionPB range_column_values = 7;

  // Column values to insert/update/delete - required
  // Note: DELETE statement has no column value.
  repeated QLColumnValuePB column_values = 8;

  // Where clause condition -- currently this is only allowed for deletes.
  optional QLExpressionPB where_expr = 14;

  // If clause condition
  optional QLExpressionPB if_expr = 9;

  // Time to live in milliseconds.
  optional uint64 ttl = 10;

  // Listing of all columns that this write operation is referencing. TServers will need to read
  // these columns when processing the write request.
  optional QLReferencedColumnsPB column_refs = 11;

  // Id used to track different queries.
  optional int64 query_id = 12;

  // User-provided timestamp in microseconds.
  optional uint64 user_timestamp_usec = 13;

  // Ids of indexes that need update.
  repeated bytes update_index_ids = 15;

  // Child transaction data for additional write requests necessary for index updates, etc.
  optional ChildTransactionDataPB child_transaction_data = 16;
}

//-------------------------------------- Read request ----------------------------------------

// QLRSColDesc is the descriptor of a SELECT'ed column in a ResultSet, which can be any expression
// and not just table columns.
message QLRSColDescPB {
  optional string name = 1;
  optional QLTypePB ql_type = 2;
}

// Descriptor of a row in a resultset.
message QLRSRowDescPB {
  repeated QLRSColDescPB rscol_descs = 1;
}

// TODO(neil) The protocol for select needs to be changed accordingly when we introduce and cache
// execution plan in tablet server.
message QLReadRequestPB {
  // Client info
  optional QLClient client = 1; // required
  optional uint64 request_id = 2; // client request id - for debug tracing purpose only

  // Table schema version
  optional uint32 schema_version = 3; // required

  // Hashed key of row(s) to read - all fields required. The hashed column values must be in the
  // same order as the column order in the table schema. If only a subset of hash columns are
  // specified in the WHERE clause of the SELECT statement, "hashed_column_values" will be empty
  // and we will do a full-table query across tablets.
  optional uint32 hash_code = 4;
  repeated QLExpressionPB hashed_column_values = 5;

  optional bool is_forward_scan = 18 [default = true];

  // Where clause condition
  optional QLExpressionPB where_expr = 6;

  // TODO(neil) Currently, we need only the datatypes of the rsrow descriptor. However, when we
  // optimize our execution pipeline to bypass QL layer, we might need to send the name as part
  // of the prepared protobuf so that server know how to form result set without the help from QL.
  //
  // For now, we sent rsrow descriptor from proxy to tablet server for every request. RSRow is just
  // a selected row. We call it rsrow to distinguish a selected row from a row of a table in the
  // database in our coding.
  optional QLRSRowDescPB rsrow_desc = 17; // required.
  repeated QLExpressionPB selected_exprs = 7; // required.

  // Reading distinct columns?
  optional bool distinct = 12 [default = false];

  // Limit number of rows to return. For QL SELECT, this limit is the smaller of the page size (max
  // (max number of rows to return per fetch) & the LIMIT clause if present in the SELECT statement.
  optional uint64 limit = 8;

  // Paging state retrieved from the last response.
  optional QLPagingStatePB paging_state = 10;

  // Return paging state when "limit" number of rows are returned? In case when "limit" is the
  // page size, this is set for QLResponsePB to return the paging state for the next fetch.
  optional bool return_paging_state = 11 [default = false];

  // The remote endpoint sending this request. This is filled in by the server and should not be
  // set.
  optional HostPortPB remote_endpoint = 13;

  // the upper limit for partition (hash) key scan ranges (inclusive)
  optional uint32 max_hash_code = 14;

  // Listing of all columns that this operation is referencing. TServers will need to read these
  // columns when processing this read request.
  optional QLReferencedColumnsPB column_refs = 15;

  // Id used to track different queries.
  optional int64 query_id = 16;

  // Flag for reading aggregate values.
  optional bool is_aggregate = 19 [default = false];
}

//------------------------------ Response (for both read and write) -----------------------------

message QLResponsePB {

  // Response status
  enum QLStatus {
    YQL_STATUS_OK = 0;
    YQL_STATUS_SCHEMA_VERSION_MISMATCH = 1;
    YQL_STATUS_RUNTIME_ERROR = 2;
    YQL_STATUS_USAGE_ERROR = 3;
    YQL_STATUS_RESTART_REQUIRED_ERROR = 4;
  }

  // Status and error message
  optional QLStatus status = 1 [ default = YQL_STATUS_OK ]; // required
  optional string error_message = 2;

  // Schema of the rows returned if present (used by conditional DML (write) request only
  // as of Jan 2017).
  repeated ColumnSchemaPB column_schemas = 3;

  // Sidecar of rows data returned
  optional int32 rows_data_sidecar = 4;

  // Paging state for continuing the read in the next QLReadRequestPB fetch.
  optional QLPagingStatePB paging_state = 5;

  // Result of child transaction.
  optional ChildTransactionResultPB child_transaction_result = 6;
}
