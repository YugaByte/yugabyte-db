// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
// Protobufs which are common throughout YB.
//
// This file may contain protobufs which are persisted on disk
// as well as sent on the wire. If a particular protobuf is only
// used as part of the client-server wire protocol, it should go
// in common/wire_protocol.proto instead. If it is only used within
// the server(s), it should go in server/metadata.proto,
// etc, as appropriate.
syntax = "proto2";

package yb;

option java_package = "org.yb";

// Client type.
enum QLClient {
  YQL_CLIENT_CQL = 1;
  YQL_CLIENT_PGSQL = 2;
  YQL_CLIENT_REDIS = 3;
}

// Client type.
enum YQLDatabase {
  YQL_DATABASE_UNDEFINED = 1;
  YQL_DATABASE_CQL = 2;
  YQL_DATABASE_PGSQL = 3; // Pgsql database
  YQL_DATABASE_REDIS = 4;

  // Pgsql Schema. Its name should be qualified name <database>.<schema>
  // YQL_DATABASE_PGSQL_SUBDB = 4;
}

// To ensure compatibility between release versions, the numeric values of these datatypes cannot
// be changed once the types are implemented and released.
enum DataType {
  UNKNOWN_DATA = 999;
  NULL_VALUE_TYPE = 0;
  INT8 = 1;
  INT16 = 2;
  INT32 = 3;
  INT64 = 4;
  STRING = 5;
  BOOL = 6;
  FLOAT = 7;
  DOUBLE = 8;
  BINARY = 9;
  TIMESTAMP = 10;
  DECIMAL = 11;
  VARINT = 12;  // VARINT is not yet fully implemented, but it is a CQL type.
  INET = 13;
  LIST = 14;
  MAP = 15;
  SET = 16;
  UUID = 17;
  TIMEUUID = 18;
  TUPLE = 19;  // TUPLE is not yet fully implemented, but it is a CQL type.
  TYPEARGS = 20;
  USER_DEFINED_TYPE = 21;
  FROZEN = 22;
  DATE = 23;
  TIME = 24;
  JSONB = 25;

  // All unsigned datatypes will be removed from QL because databases do not have these types.
  UINT8 = 100;
  UINT16 = 101;
  UINT32 = 102;
  UINT64 = 103;
}

// This must exactly match YBTableType in client.h.
// We have static_assert's in tablet-test.cc to verify this.
enum TableType {
  option allow_alias = true;

  YQL_TABLE_TYPE = 2;
  REDIS_TABLE_TYPE = 3;
  PGSQL_TABLE_TYPE = 4;
  TRANSACTION_STATUS_TABLE_TYPE = 5;

  DEFAULT_TABLE_TYPE = 2;
}

enum YBConsistencyLevel {
  // This consistency level provides Linearizability guarantees and is the default for our system.
  STRONG = 1;

  // Consistent-prefix consistency means that we always see consistent snapshot of the database in
  // a well-defined order. If operations A, B and C take place, we will either see A, AB, or ABC.
  // Note that reads might still go back in time since we might see ABC on one replica and AB on
  // another.
  CONSISTENT_PREFIX = 2;

  // For cross-shard transactions only: user-enforced consistency level means it is the user's
  // responsibility to enforce consistency across shards or tables/indexes.
  USER_ENFORCED = 3;
}

// Used for Cassandra Roles and Permissions
enum ResourceType {
  ALL_KEYSPACES = 1;
  KEYSPACE = 2;
  TABLE = 3;
  ALL_ROLES = 4;
  ROLE = 5;
}

// Suffixed with PERMISSION, because Google does not allow same enum name CREATE
enum PermissionType {
  ALTER_PERMISSION = 0;
  CREATE_PERMISSION = 1;
  DROP_PERMISSION = 2;
  SELECT_PERMISSION = 3;
  MODIFY_PERMISSION = 4;
  AUTHORIZE_PERMISSION = 5;
  DESCRIBE_PERMISSION = 6;
  ALL_PERMISSION = 999999999;
}

// The type used in column schemas, which may have type parameters (i.e. for collections)
// If types have parameters, they are stored in the params field. Otherwise params is empty.
// e.g. (using lower case of QLTypes and upper case for DataType):
//   string                     --> {main = STRING, params = []}
//   set<int>                   --> {main = SET, params = [int]}
//   map<int, string>           --> {main = MAP, params = [int, string]}
// later (not implemented yet):
//   tuple<int, string, double> --> {main = TUPLE, params = [int, string, double]}
// User-Defined types are identified by keyspace_name and type_name and their fields are stored in
// field_names (for the names) and params (for the types)
// e.g. given a declared type "ks.employee (firstname : string, lastname : string, ssn : bigint)":
// ks.employee                  --> { main = USER_DEFINED_TYPE,
//                                    params = [string, string, bigint],
//                                    keyspace_name = "ks",
//                                    type_name = "employee",
//                                    field_names = ["firstname", "lastname", "ssn"]}

message QLTypePB {
  optional DataType main = 1;
  repeated QLTypePB params = 2;

  // Fields for user-defined types
  message UDTypeInfo {
    optional string keyspace_name = 1;
    optional string name = 2;
    optional string id = 3;
    repeated string field_names = 4;
  }
  optional UDTypeInfo udtype_info = 3;
}

// TODO: Differentiate between the schema attributes
// that are only relevant to the server (e.g.,
// encoding and compression) and those that also
// matter to the client.
message ColumnSchemaPB {
  optional uint32 id = 1;
  required string name = 2;
  required QLTypePB type = 3;
  optional bool is_key = 4 [default = false];
  optional bool is_hash_key = 5 [default = false];
  optional bool is_nullable = 6 [default = false];
  optional bool is_static = 7 [default = false];
  optional bool is_counter = 8 [default = false];
  optional int32 order = 12 [default = 0];
  optional uint32 sorting_type = 9 [default = 0];
  // Reserved for deprecated read_default_value and write_default_value fields.
  reserved 10, 11;
}

message TablePropertiesPB {
  optional uint64 default_time_to_live = 1;
  optional bool contain_counters = 2;
  optional bool is_transactional = 3 [default = false];
  // The table id of the table that this table is co-partitioned with.
  optional bytes copartition_table_id = 4;
  // For index table only: consistency with respect to the indexed table.
  optional YBConsistencyLevel consistency_level = 5 [ default = STRONG ];
}

message SchemaPB {
  repeated ColumnSchemaPB columns = 1;
  optional TablePropertiesPB table_properties = 2;
}

// This message contains the metadata of a secondary index of a table. It maps the indexed table
// columns to the index table columns.
message IndexInfoPB {
  optional bytes table_id = 1; // Index table id.
  optional bytes indexed_table_id = 8; // Indexed table id.
  optional uint32 version = 2; // Index table's schema version.
  optional bool is_local = 3 [ default = false ];  // Whether the index is a local index
  optional bool is_unique = 7 [ default = false ]; // Whether the index is a unique index

  // Index column mapping.
  message IndexColumnPB {
    optional uint32 column_id = 1;         // Column id in the index table.
    optional uint32 indexed_column_id = 2; // Corresponding column id in indexed table.
  }
  repeated IndexColumnPB columns = 4;  // Indexed and covering columns.
  optional uint32 hash_column_count = 5;   // Number of hash columns in the index.
  optional uint32 range_column_count = 6;  // Number of range columns in the index.

  repeated uint32 indexed_hash_column_ids = 9;   // Hash column ids in the indexed table.
  repeated uint32 indexed_range_column_ids = 10; // Range column ids in the indexed table.
}

message HostPortPB {
  required string host = 1;
  required uint32 port = 2;
}

// The possible order modes for clients.
// Clients specify these in new scan requests.
// Ordered scans are fault-tolerant, and can be retried elsewhere in the case
// of tablet server failure. However, ordered scans impose additional overhead
// since the tablet server needs to sort the result rows.
enum OrderMode {
  UNKNOWN_ORDER_MODE = 0;
  // This is the default order mode.
  UNORDERED = 1;
  ORDERED = 2;
}

// The serialized format of a YB table partition schema.
message PartitionSchemaPB {

  // A column identifier for partition schemas. In general, the name will be
  // used when a client creates the table since column IDs are assigned by the
  // master. All other uses of partition schemas will use the numeric column ID.
  message ColumnIdentifierPB {
    oneof identifier {
      int32 id = 1;
      string name = 2;
    }
  }

  message RangeSchemaPB {
    // Column identifiers of columns included in the range. All columns must be
    // a component of the primary key.
    repeated ColumnIdentifierPB columns = 1;
  }

  message HashBucketSchemaPB {
    // Column identifiers of columns included in the hash. Every column must be
    // a component of the primary key.
    repeated ColumnIdentifierPB columns = 1;

    // Number of buckets into which columns will be hashed. Must be at least 2.
    required int32 num_buckets = 2;

    // Seed value for hash calculation. Administrators may set a seed value
    // on a per-table basis in order to randomize the mapping of rows to
    // buckets. Setting a seed provides some amount of protection against denial
    // of service attacks when the hash bucket columns contain user provided
    // input.
    optional uint32 seed = 3;

    enum HashAlgorithm {
      UNKNOWN = 0;
      MURMUR_HASH_2 = 1;
    }

    // The hash algorithm to use for calculating the hash bucket.
    optional HashAlgorithm hash_algorithm = 4;
  }

  repeated HashBucketSchemaPB hash_bucket_schemas = 1;
  optional RangeSchemaPB range_schema = 2;

  enum HashSchema {
    MULTI_COLUMN_HASH_SCHEMA = 1;
    REDIS_HASH_SCHEMA = 2;
    PGSQL_HASH_SCHEMA = 3;
  }

  optional HashSchema hash_schema = 3;
}

// The serialized format of a YB table partition.
message PartitionPB {
  // The hash buckets of the partition. The number of hash buckets must match
  // the number of hash bucket components in the partition's schema.
  repeated int32 hash_buckets = 1 [packed = true];
  // The encoded start partition key (inclusive).
  optional bytes partition_key_start = 2;
  // The encoded end partition key (exclusive).
  optional bytes partition_key_end = 3;
}

enum IsolationLevel {
  NON_TRANSACTIONAL = 0;
  SNAPSHOT_ISOLATION = 1;
  SERIALIZABLE_ISOLATION = 2;
}

enum TransactionStatus {
  CREATED = 1;
  PENDING = 2;

  COMMITTED = 4;
  APPLIED_IN_ALL_INVOLVED_TABLETS = 7;

  ABORTED = 8;

  // All following entries are not used in RAFT, but as events between status tablet and involved
  // tablets:
  APPLYING = 20;
  APPLIED_IN_ONE_OF_INVOLVED_TABLETS = 21;
  CLEANUP = 22;
}

message TransactionMetadataPB {
  optional bytes transaction_id = 1; // 16 byte uuid
  optional IsolationLevel isolation = 2 [default=NON_TRANSACTIONAL];
  optional string status_tablet = 3;
  optional fixed64 priority = 4;
  optional fixed64 start_hybrid_time = 5;
}

// See ReadHybridTime for explation of this message.
message ReadHybridTimePB {
  optional fixed64 read_ht = 1;

  optional fixed64 local_limit_ht = 2;

  optional fixed64 global_limit_ht = 3;
}

// For clarification of field meaning see comments of appropriate fields in YBTransaction::Impl
message ChildTransactionDataPB {
  optional TransactionMetadataPB metadata = 1;
  optional ReadHybridTimePB read_time = 2;
  map<string, fixed64> local_limits = 3;
}

enum InvolvedTabletMetadataState {
  MISSING = 0;
  EXIST = 1;
  MAY_EXIST = 2;
}

message TransactionInvolvedTabletPB {
  optional bytes tablet_id = 1;
  optional InvolvedTabletMetadataState metadata_state = 2;
}

// For clarification of field meaning see comments of appropriate fields in YBTransaction::Impl
message ChildTransactionResultPB {
  repeated TransactionInvolvedTabletPB tablets = 1;
  optional fixed64 restart_read_ht = 2;
  map<string, fixed64> read_restarts = 3;
}

message DeletedColumnPB {
  // Required. Column Id.
  optional int32 column_id = 1;

  // Required. Hybrid Time when column was deleted on this tablet.
  optional fixed64 deleted_hybrid_time = 2;
}

message CloudInfoPB {
  optional string placement_cloud = 1;
  optional string placement_region = 2;
  optional string placement_zone = 3;
}
