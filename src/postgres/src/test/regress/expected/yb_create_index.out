--
-- CREATE_INDEX
-- Create ancillary data structures (i.e. indices)
--
--
-- BTREE
--
CREATE INDEX onek_unique1 ON onek USING btree(unique1 int4_ops);
CREATE INDEX IF NOT EXISTS onek_unique1 ON onek USING btree(unique1 int4_ops);
NOTICE:  relation "onek_unique1" already exists, skipping
CREATE INDEX IF NOT EXISTS ON onek USING btree(unique1 int4_ops);
ERROR:  syntax error at or near "ON"
LINE 1: CREATE INDEX IF NOT EXISTS ON onek USING btree(unique1 int4_...
                                   ^
CREATE INDEX onek_unique2 ON onek USING btree(unique2 int4_ops);
CREATE INDEX onek_hundred ON onek USING btree(hundred int4_ops);
CREATE INDEX onek_stringu1 ON onek USING btree(stringu1 name_ops);
CREATE INDEX tenk1_unique1 ON tenk1 USING btree(unique1 int4_ops);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk1_unique2 ON tenk1 USING btree(unique2 int4_ops);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk1_hundred ON tenk1 USING btree(hundred int4_ops);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk1_thous_tenthous ON tenk1 (thousand, tenthous);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk2_unique1 ON tenk2 USING btree(unique1 int4_ops);
CREATE INDEX tenk2_unique2 ON tenk2 USING btree(unique2 int4_ops);
CREATE INDEX tenk2_hundred ON tenk2 USING btree(hundred int4_ops);
CREATE INDEX rix ON road USING btree (name text_ops);
CREATE INDEX iix ON ihighway USING btree (name text_ops);
ERROR:  relation "ihighway" does not exist
CREATE INDEX six ON shighway USING btree (name text_ops);
ERROR:  relation "shighway" does not exist
CREATE INDEX onek_two_idx ON onek USING btree(two);
DROP INDEX onek_two_idx;
DROP INDEX onek_two_idx;
ERROR:  index "onek_two_idx" does not exist
DROP INDEX IF EXISTS onek_two_idx;
NOTICE:  index "onek_two_idx" does not exist, skipping
--
-- Create index on existing table with data
--
CREATE TABLE index_test (col1 int, col2 int);
INSERT INTO index_test (col1, col2) VALUES (1, 100);
INSERT INTO index_test (col1, col2) VALUES (2, 200);
CREATE INDEX index_test_idx1 ON index_test(col1);
CREATE INDEX index_test_idx2 ON index_test(col1, col2);
DROP INDEX index_test_idx1;
DROP INDEX index_test_idx2;
DROP TABLE index_test;
CREATE TABLE test_index (v1 INT, v2 INT, v3 INT);
CREATE INDEX ON test_index (v1);
CREATE INDEX ON test_index (v2, v3);
INSERT INTO test_index VALUES (1, 11, 21), (2, 12, 22), (3, 13, 23), (4, 14, 24), (5, 15, 25);
-- Verify order by on indexed column
SELECT * FROM test_index ORDER BY v1;
 v1 | v2 | v3
----+----+----
  1 | 11 | 21
  2 | 12 | 22
  3 | 13 | 23
  4 | 14 | 24
  5 | 15 | 25
(5 rows)

-- Verify delete with hash value in index
DELETE FROM test_index WHERE v2 = 12 OR v2 = 13;
SELECT * FROM test_index ORDER BY v1;
 v1 | v2 | v3
----+----+----
  1 | 11 | 21
  4 | 14 | 24
  5 | 15 | 25
(3 rows)

-- Verify different WHERE conditions are supported.
SELECT * FROM test_index WHERE v1 IS NULL;
 v1 | v2 | v3
----+----+----
(0 rows)

SELECT * FROM test_index WHERE v1 IS NOT NULL;
 v1 | v2 | v3
----+----+----
  5 | 15 | 25
  1 | 11 | 21
  4 | 14 | 24
(3 rows)

SELECT * FROM test_index WHERE v1 IN (1, 2, 3);
 v1 | v2 | v3
----+----+----
  1 | 11 | 21
(1 row)

-- Verify indexes on system catalog tables are updated properly
CREATE TABLE test_sys_catalog_update (k int primary key, v int);
EXPLAIN SELECT relname FROM pg_class WHERE relname = 'test_sys_catalog_update';
                                             QUERY PLAN
----------------------------------------------------------------------------------------------------
 Index Only Scan using pg_class_relname_nsp_index on pg_class  (cost=0.00..4.01 rows=1000 width=64)
   Index Cond: (relname = 'test_sys_catalog_update'::name)
(2 rows)

SELECT relname  FROM pg_class WHERE relname = 'test_sys_catalog_update';
         relname
-------------------------
 test_sys_catalog_update
(1 row)

EXPLAIN SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update';
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Index Only Scan using pg_type_typname_nsp_index on pg_type  (cost=0.00..4.01 rows=1000 width=64)
   Index Cond: (typname = 'test_sys_catalog_update'::name)
(2 rows)

SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update';
         typname
-------------------------
 test_sys_catalog_update
(1 row)

EXPLAIN SELECT attname, atttypid FROM pg_attribute WHERE attname = 'v';
                                               QUERY PLAN
--------------------------------------------------------------------------------------------------------
 Index Scan using pg_attribute_relid_attnam_index on pg_attribute  (cost=0.00..4.01 rows=1000 width=68)
   Index Cond: (attname = 'v'::name)
(2 rows)

SELECT attname, atttypid FROM pg_attribute WHERE attname = 'v';
 attname | atttypid
---------+----------
 v       |       23
(1 row)

ALTER TABLE test_sys_catalog_update RENAME TO test_sys_catalog_update_new;
ALTER TABLE test_sys_catalog_update_new RENAME COLUMN v TO w;
SELECT relname FROM pg_class WHERE relname = 'test_sys_catalog_update';
 relname
---------
(0 rows)

SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update';
 typname
---------
(0 rows)

SELECT attname, atttypid FROM pg_attribute WHERE attname = 'v';
 attname | atttypid
---------+----------
(0 rows)

SELECT relname FROM pg_class WHERE relname = 'test_sys_catalog_update_new';
           relname
-----------------------------
 test_sys_catalog_update_new
(1 row)

SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update_new';
           typname
-----------------------------
 test_sys_catalog_update_new
(1 row)

SELECT attname, atttypid FROM pg_attribute WHERE attname = 'w';
 attname | atttypid
---------+----------
 w       |       23
(1 row)

-- Test primary key as index
CREATE TABLE t1 (h INT, r INT, v1 INT, v2 INT, PRIMARY KEY (h, r));
CREATE INDEX ON t1 (v1);
CREATE UNIQUE INDEX ON t1 (v1, v2);
CREATE TABLE t2 (h INT, r INT, v1 INT, v2 INT, PRIMARY KEY (h, r));
\d t1
                 Table "public.t1"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 h      | integer |           | not null |
 r      | integer |           | not null |
 v1     | integer |           |          |
 v2     | integer |           |          |
Indexes:
    "t1_pkey" PRIMARY KEY, btree (h, r)
    "t1_v1_v2_idx" UNIQUE, btree (v1, v2)
    "t1_v1_idx" btree (v1)

\d t2
                 Table "public.t2"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 h      | integer |           | not null |
 r      | integer |           | not null |
 v1     | integer |           |          |
 v2     | integer |           |          |
Indexes:
    "t2_pkey" PRIMARY KEY, btree (h, r)

INSERT INTO t1 VALUES (1, 1, 11, 11), (1, 2, 11, 12);
INSERT INTO t2 VALUES (1, 1, 21, 21);
-- The following 2 inserts should produce error due to duplicate primary key / unique index value
INSERT INTO t1 VALUES (1, 1, 99, 99);
ERROR:  Query error: Duplicate key found in primary key or unique index
INSERT INTO t1 VALUES (1, 3, 11, 11);
ERROR:  Query error: Duplicate key found in primary key or unique index
INSERT INTO t1 VALUES (1, 3, 11, 13), (2, 1, 12, 13), (2, 2, 12, 14);
EXPLAIN (COSTS OFF) SELECT * FROM t1 ORDER BY h, r;
        QUERY PLAN
--------------------------
 Sort
   Sort Key: h, r
   ->  Foreign Scan on t1
(3 rows)

SELECT * FROM t1 ORDER BY h, r;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
 1 | 2 | 11 | 12
 1 | 3 | 11 | 13
 2 | 1 | 12 | 13
 2 | 2 | 12 | 14
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE h = 1 ORDER BY r;
              QUERY PLAN
--------------------------------------
 Sort
   Sort Key: r
   ->  Index Scan using t1_pkey on t1
         Index Cond: (h = 1)
(4 rows)

SELECT * FROM t1 WHERE h = 1 ORDER BY r;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
 1 | 2 | 11 | 12
 1 | 3 | 11 | 13
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE h > 1 ORDER BY h, r;
              QUERY PLAN
--------------------------------------
 Sort
   Sort Key: h, r
   ->  Index Scan using t1_pkey on t1
         Index Cond: (h > 1)
(4 rows)

SELECT * FROM t1 WHERE h > 1 ORDER BY h, r;
 h | r | v1 | v2
---+---+----+----
 2 | 1 | 12 | 13
 2 | 2 | 12 | 14
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE h = 1 AND r = 1;
             QUERY PLAN
-------------------------------------
 Index Scan using t1_pkey on t1
   Index Cond: ((h = 1) AND (r = 1))
(2 rows)

SELECT * FROM t1 WHERE h = 1 AND r = 1;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE v1 = 11 ORDER BY h, r;
                QUERY PLAN
-------------------------------------------
 Sort
   Sort Key: h, r
   ->  Index Scan using t1_v1_v2_idx on t1
         Index Cond: (v1 = 11)
(4 rows)

SELECT * FROM t1 WHERE v1 = 11 ORDER BY h, r;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
 1 | 2 | 11 | 12
 1 | 3 | 11 | 13
(3 rows)

-- Disabled this test because we do not have proper stats. We return the same cost estimate
-- for indexes t1_v1_idx and t1_v1_v2_idx and Postgres will be either of them at random.
-- EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE v1 = 11 AND v2 = 11;
-- SELECT * FROM t1 WHERE v1 = 11 AND v2 = 11;
EXPLAIN (COSTS OFF) SELECT t1.h, t1.r, t1.v1, t2.v1 FROM t1, t2 WHERE t1.h = t2.h AND t1.r = t2.r;
                   QUERY PLAN
-------------------------------------------------
 Nested Loop
   ->  Foreign Scan on t1
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((h = t1.h) AND (r = t1.r))
(4 rows)

SELECT t1.h, t1.r, t1.v1, t2.v1 FROM t1, t2 WHERE t1.h = t2.h AND t1.r = t2.r;
 h | r | v1 | v1
---+---+----+----
 1 | 1 | 11 | 21
(1 row)

--
-- NULL value in index
--
CREATE TABLE null_index(k int, v int);
CREATE INDEX null_index_v ON null_index(v);
INSERT INTO null_index(k) VALUES(1);
INSERT INTO null_index VALUES(2, NULL);
INSERT INTO null_index VALUES(3, 3);
SELECT * FROM null_index ORDER BY k;
 k | v
---+---
 1 |
 2 |
 3 | 3
(3 rows)

SELECT * FROM null_index WHERE v IS NULL ORDER BY k;
 k | v
---+---
 1 |
 2 |
(2 rows)

SELECT * FROM null_index WHERE v IS NOT NULL ORDER BY k;
 k | v
---+---
 3 | 3
(1 row)
