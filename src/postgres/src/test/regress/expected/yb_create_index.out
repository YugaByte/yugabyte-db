--
-- CREATE_INDEX
-- Create ancillary data structures (i.e. indices)
--
--
-- LSM
--
CREATE INDEX onek_unique1 ON onek USING lsm(unique1 int4_ops);
CREATE INDEX IF NOT EXISTS onek_unique1 ON onek USING lsm(unique1 int4_ops);
NOTICE:  relation "onek_unique1" already exists, skipping
CREATE INDEX IF NOT EXISTS ON onek USING lsm(unique1 int4_ops);
ERROR:  syntax error at or near "ON"
LINE 1: CREATE INDEX IF NOT EXISTS ON onek USING lsm(unique1 int4_op...
                                   ^
CREATE INDEX onek_unique2 ON onek USING lsm(unique2 int4_ops);
CREATE INDEX onek_hundred ON onek USING lsm(hundred int4_ops);
CREATE INDEX onek_stringu1 ON onek USING lsm(stringu1 name_ops);
CREATE INDEX tenk1_unique1 ON tenk1 USING lsm(unique1 int4_ops);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk1_unique2 ON tenk1 USING lsm(unique2 int4_ops);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk1_hundred ON tenk1 USING lsm(hundred int4_ops);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk1_thous_tenthous ON tenk1 (thousand, tenthous);
ERROR:  relation "tenk1" does not exist
CREATE INDEX tenk2_unique1 ON tenk2 USING lsm(unique1 int4_ops);
CREATE INDEX tenk2_unique2 ON tenk2 USING lsm(unique2 int4_ops);
CREATE INDEX tenk2_hundred ON tenk2 USING lsm(hundred int4_ops);
CREATE INDEX rix ON road USING lsm (name text_ops);
CREATE INDEX iix ON ihighway USING lsm (name text_ops);
ERROR:  relation "ihighway" does not exist
CREATE INDEX six ON shighway USING lsm (name text_ops);
ERROR:  relation "shighway" does not exist
CREATE INDEX onek_two_idx ON onek USING lsm(two);
DROP INDEX onek_two_idx;
DROP INDEX onek_two_idx;
ERROR:  index "onek_two_idx" does not exist
DROP INDEX IF EXISTS onek_two_idx;
NOTICE:  index "onek_two_idx" does not exist, skipping
--
-- Create index on existing table with data
--
CREATE TABLE index_test (col1 int, col2 int);
INSERT INTO index_test (col1, col2) VALUES (1, 100);
INSERT INTO index_test (col1, col2) VALUES (2, 200);
CREATE INDEX index_test_idx1 ON index_test(col1);
CREATE INDEX index_test_idx2 ON index_test(col1, col2);
DROP INDEX index_test_idx1;
DROP INDEX index_test_idx2;
DROP TABLE index_test;
CREATE TABLE test_index (v1 INT, v2 INT, v3 INT);
CREATE INDEX ON test_index (v1);
CREATE INDEX ON test_index (v2, v3);
INSERT INTO test_index VALUES (1, 11, 21), (2, 12, 22), (3, 13, 23), (4, 14, 24), (5, 15, 25);
-- Verify order by on indexed column
SELECT * FROM test_index ORDER BY v1;
 v1 | v2 | v3
----+----+----
  1 | 11 | 21
  2 | 12 | 22
  3 | 13 | 23
  4 | 14 | 24
  5 | 15 | 25
(5 rows)

-- Verify delete with hash value in index
DELETE FROM test_index WHERE v2 = 12 OR v2 = 13;
SELECT * FROM test_index ORDER BY v1;
 v1 | v2 | v3
----+----+----
  1 | 11 | 21
  4 | 14 | 24
  5 | 15 | 25
(3 rows)

-- Verify different WHERE conditions are supported.
SELECT * FROM test_index WHERE v1 IS NULL;
 v1 | v2 | v3
----+----+----
(0 rows)

SELECT * FROM test_index WHERE v1 IS NOT NULL;
 v1 | v2 | v3
----+----+----
  5 | 15 | 25
  1 | 11 | 21
  4 | 14 | 24
(3 rows)

SELECT * FROM test_index WHERE v1 IN (1, 2, 3);
 v1 | v2 | v3
----+----+----
  1 | 11 | 21
(1 row)

-- Verify indexes on system catalog tables are updated properly
CREATE TABLE test_sys_catalog_update (k int primary key, v int);
EXPLAIN SELECT relname FROM pg_class WHERE relname = 'test_sys_catalog_update';
                                             QUERY PLAN
----------------------------------------------------------------------------------------------------
 Index Only Scan using pg_class_relname_nsp_index on pg_class  (cost=0.00..4.01 rows=1000 width=64)
   Index Cond: (relname = 'test_sys_catalog_update'::name)
(2 rows)

SELECT relname  FROM pg_class WHERE relname = 'test_sys_catalog_update';
         relname
-------------------------
 test_sys_catalog_update
(1 row)

EXPLAIN SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update';
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 Index Only Scan using pg_type_typname_nsp_index on pg_type  (cost=0.00..4.01 rows=1000 width=64)
   Index Cond: (typname = 'test_sys_catalog_update'::name)
(2 rows)

SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update';
         typname
-------------------------
 test_sys_catalog_update
(1 row)

EXPLAIN SELECT attname, atttypid FROM pg_attribute WHERE attname = 'v';
                                               QUERY PLAN
--------------------------------------------------------------------------------------------------------
 Index Scan using pg_attribute_relid_attnam_index on pg_attribute  (cost=0.00..4.01 rows=1000 width=68)
   Index Cond: (attname = 'v'::name)
(2 rows)

SELECT attname, atttypid FROM pg_attribute WHERE attname = 'v';
 attname | atttypid
---------+----------
 v       |       23
(1 row)

ALTER TABLE test_sys_catalog_update RENAME TO test_sys_catalog_update_new;
ALTER TABLE test_sys_catalog_update_new RENAME COLUMN v TO w;
SELECT relname FROM pg_class WHERE relname = 'test_sys_catalog_update';
 relname
---------
(0 rows)

SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update';
 typname
---------
(0 rows)

SELECT attname, atttypid FROM pg_attribute WHERE attname = 'v';
 attname | atttypid
---------+----------
(0 rows)

SELECT relname FROM pg_class WHERE relname = 'test_sys_catalog_update_new';
           relname
-----------------------------
 test_sys_catalog_update_new
(1 row)

SELECT typname FROM pg_type WHERE typname = 'test_sys_catalog_update_new';
           typname
-----------------------------
 test_sys_catalog_update_new
(1 row)

SELECT attname, atttypid FROM pg_attribute WHERE attname = 'w';
 attname | atttypid
---------+----------
 w       |       23
(1 row)

-- Test primary key as index
CREATE TABLE t1 (h INT, r INT, v1 INT, v2 INT, PRIMARY KEY (h, r));
CREATE INDEX ON t1 (v1);
CREATE UNIQUE INDEX ON t1 (v1, v2);
CREATE TABLE t2 (h INT, r INT, v1 INT, v2 INT, PRIMARY KEY (h, r));
\d t1
                 Table "public.t1"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 h      | integer |           | not null |
 r      | integer |           | not null |
 v1     | integer |           |          |
 v2     | integer |           |          |
Indexes:
    "t1_pkey" PRIMARY KEY, lsm (h, r)
    "t1_v1_v2_idx" UNIQUE, lsm (v1, v2)
    "t1_v1_idx" lsm (v1)

\d t2
                 Table "public.t2"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 h      | integer |           | not null |
 r      | integer |           | not null |
 v1     | integer |           |          |
 v2     | integer |           |          |
Indexes:
    "t2_pkey" PRIMARY KEY, lsm (h, r)

INSERT INTO t1 VALUES (1, 1, 11, 11), (1, 2, 11, 12);
INSERT INTO t2 VALUES (1, 1, 21, 21);
-- The following 2 inserts should produce error due to duplicate primary key / unique index value
INSERT INTO t1 VALUES (1, 1, 99, 99);
ERROR:  duplicate key value violates unique constraint "t1_pkey"
INSERT INTO t1 VALUES (1, 3, 11, 11);
ERROR:  duplicate key value violates unique constraint "t1_v1_v2_idx"
INSERT INTO t1 VALUES (1, 3, 11, 13), (2, 1, 12, 13), (2, 2, 12, 14);
EXPLAIN (COSTS OFF) SELECT * FROM t1 ORDER BY h, r;
        QUERY PLAN
--------------------------
 Sort
   Sort Key: h, r
   ->  Foreign Scan on t1
(3 rows)

SELECT * FROM t1 ORDER BY h, r;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
 1 | 2 | 11 | 12
 1 | 3 | 11 | 13
 2 | 1 | 12 | 13
 2 | 2 | 12 | 14
(5 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE h = 1 ORDER BY r;
              QUERY PLAN
--------------------------------------
 Sort
   Sort Key: r
   ->  Index Scan using t1_pkey on t1
         Index Cond: (h = 1)
(4 rows)

SELECT * FROM t1 WHERE h = 1 ORDER BY r;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
 1 | 2 | 11 | 12
 1 | 3 | 11 | 13
(3 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE h > 1 ORDER BY h, r;
              QUERY PLAN
--------------------------------------
 Sort
   Sort Key: h, r
   ->  Index Scan using t1_pkey on t1
         Index Cond: (h > 1)
(4 rows)

SELECT * FROM t1 WHERE h > 1 ORDER BY h, r;
 h | r | v1 | v2
---+---+----+----
 2 | 1 | 12 | 13
 2 | 2 | 12 | 14
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE h = 1 AND r = 1;
             QUERY PLAN
-------------------------------------
 Index Scan using t1_pkey on t1
   Index Cond: ((h = 1) AND (r = 1))
(2 rows)

SELECT * FROM t1 WHERE h = 1 AND r = 1;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE v1 = 11 ORDER BY h, r;
                QUERY PLAN
-------------------------------------------
 Sort
   Sort Key: h, r
   ->  Index Scan using t1_v1_v2_idx on t1
         Index Cond: (v1 = 11)
(4 rows)

SELECT * FROM t1 WHERE v1 = 11 ORDER BY h, r;
 h | r | v1 | v2
---+---+----+----
 1 | 1 | 11 | 11
 1 | 2 | 11 | 12
 1 | 3 | 11 | 13
(3 rows)

-- Disabled this test because we do not have proper stats. We return the same cost estimate
-- for indexes t1_v1_idx and t1_v1_v2_idx and Postgres will be either of them at random.
-- EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE v1 = 11 AND v2 = 11;
-- SELECT * FROM t1 WHERE v1 = 11 AND v2 = 11;
EXPLAIN (COSTS OFF) SELECT t1.h, t1.r, t1.v1, t2.v1 FROM t1, t2 WHERE t1.h = t2.h AND t1.r = t2.r;
                   QUERY PLAN
-------------------------------------------------
 Nested Loop
   ->  Foreign Scan on t1
   ->  Index Scan using t2_pkey on t2
         Index Cond: ((h = t1.h) AND (r = t1.r))
(4 rows)

SELECT t1.h, t1.r, t1.v1, t2.v1 FROM t1, t2 WHERE t1.h = t2.h AND t1.r = t2.r;
 h | r | v1 | v1
---+---+----+----
 1 | 1 | 11 | 21
(1 row)

--
-- NULL value in index
--
CREATE TABLE null_index(k int, v int);
CREATE INDEX null_index_v ON null_index(v);
INSERT INTO null_index(k) VALUES(1);
INSERT INTO null_index VALUES(2, NULL);
INSERT INTO null_index VALUES(3, 3);
SELECT * FROM null_index ORDER BY k;
 k | v
---+---
 1 |
 2 |
 3 | 3
(3 rows)

SELECT * FROM null_index WHERE v IS NULL ORDER BY k;
 k | v
---+---
 1 |
 2 |
(2 rows)

SELECT * FROM null_index WHERE v IS NOT NULL ORDER BY k;
 k | v
---+---
 3 | 3
(1 row)

--
-- NULL value in unique index
--
CREATE TABLE null_unique_index(k int, v int);
CREATE UNIQUE INDEX ON null_unique_index(v);
INSERT INTO null_unique_index(k) values(1);
INSERT INTO null_unique_index values(2, NULL);
INSERT INTO null_unique_index values(3, NULL);
INSERT INTO null_unique_index values(4, 4);
INSERT INTO null_unique_index values(5, 4); -- fail
ERROR:  duplicate key value violates unique constraint "null_unique_index_v_idx"
SELECT * FROM null_unique_index WHERE v IS NULL ORDER BY k;
 k | v
---+---
 1 |
 2 |
 3 |
(3 rows)

DELETE FROM null_unique_index WHERE k = 2;
SELECT * FROM null_unique_index WHERE v IS NULL ORDER BY k;
 k | v
---+---
 1 |
 3 |
(2 rows)

DELETE FROM null_unique_index WHERE v IS NULL;
SELECT * FROM null_unique_index ORDER BY k;
 k | v
---+---
 4 | 4
(1 row)

-- Test index update with UPDATE and DELETE
CREATE TABLE test_unique (k int PRIMARY KEY, v1 int, v2 int);
CREATE UNIQUE INDEX ON test_unique (v1);
CREATE INDEX ON test_unique (v2);
-- Insert a row
INSERT INTO test_unique VALUES (1, 1, 1);
SELECT * FROM test_unique;
 k | v1 | v2
---+----+----
 1 |  1 |  1
(1 row)

-- UPDATE a row and verify the content of associated indexes via index-only scan
UPDATE test_unique SET v1 = 2 WHERE k = 1;
SELECT v1 FROM test_unique WHERE v1 IN (1, 2);
 v1
----
  2
(1 row)

SELECT v2 FROM test_unique WHERE v2 IN (1, 2);
 v2
----
  1
(1 row)

-- DELETE a row and verify the content of associated indexes via index-only scan
DELETE FROM test_unique WHERE k = 1;
SELECT v1 FROM test_unique WHERE v1 IN (1, 2);
 v1
----
(0 rows)

SELECT v2 FROM test_unique WHERE v2 IN (1, 2);
 v2
----
(0 rows)

-- Insert 2 rows of the affected v1 values. Make sure both can be inserted
-- with no duplicate key violation.
INSERT INTO test_unique VALUES (1, 1, 1);
INSERT INTO test_unique VALUES (2, 2, 2);
SELECT * FROM test_unique;
 k | v1 | v2
---+----+----
 1 |  1 |  1
 2 |  2 |  2
(2 rows)

-- Test cascade-truncate indexes
CREATE TABLE test_truncate (a int PRIMARY KEY, b int);
CREATE UNIQUE INDEX test_truncate_index ON test_truncate (b);
INSERT INTO test_truncate VALUES (1, 2);
INSERT INTO test_truncate VALUES (2, 2);
ERROR:  duplicate key value violates unique constraint "test_truncate_index"
EXPLAIN SELECT b FROM test_truncate WHERE b = 2;
                                           QUERY PLAN
-------------------------------------------------------------------------------------------------
 Index Only Scan using test_truncate_index on test_truncate  (cost=0.00..4.01 rows=1000 width=4)
   Index Cond: (b = 2)
(2 rows)

SELECT b FROM test_truncate WHERE b = 2;
 b
---
 2
(1 row)

TRUNCATE test_truncate;
SELECT b FROM test_truncate WHERE b = 2;
 b
---
(0 rows)

INSERT INTO test_truncate VALUES (2, 2);
INSERT INTO test_truncate VALUES (1, 2);
ERROR:  duplicate key value violates unique constraint "test_truncate_index"
DROP TABLE test_truncate;
-- Test index methods
CREATE TABLE test_method (k int PRIMARY KEY, v int);
CREATE INDEX ON test_method USING btree (v);
NOTICE:  index method "btree" was replaced with "lsm" in YugaByte DB
CREATE INDEX ON test_method USING hash (v);
ERROR:  index method "hash" not supported yet
HINT:  See https://github.com/YugaByte/yugabyte-db/issues/1337. Click '+' on the description to raise its priority
CREATE INDEX ON test_method USING foo (v);
ERROR:  access method "foo" does not exist
\d test_method
            Table "public.test_method"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 k      | integer |           | not null |
 v      | integer |           |          |
Indexes:
    "test_method_pkey" PRIMARY KEY, lsm (k)
    "test_method_v_idx" lsm (v)

DROP TABLE test_method;
-- Test include columns
CREATE TABLE test_include (c1 int, c2 int, c3 int);
INSERT INTO test_include VALUES (1, 1, 1), (1, 2, 2), (2, 2, 2), (3, 3, 3);
-- Expect duplicate key error
CREATE UNIQUE INDEX ON test_include (c1) include (c2);
ERROR:  duplicate key value violates unique constraint "test_include_c1_c2_idx"
DROP INDEX test_include_c1_c2_idx;
DELETE FROM test_include WHERE c1 = 1 AND c2 = 2;
CREATE UNIQUE INDEX ON test_include (c1) include (c2);
EXPLAIN SELECT c1, c2 FROM test_include WHERE c1 = 1;
                                            QUERY PLAN
---------------------------------------------------------------------------------------------------
 Index Only Scan using test_include_c1_c2_idx on test_include  (cost=0.00..4.01 rows=1000 width=8)
   Index Cond: (c1 = 1)
(2 rows)

SELECT c1, c2 FROM test_include WHERE c1 = 1;
 c1 | c2
----+----
  1 |  1
(1 row)

\d test_include
            Table "public.test_include"
 Column |  Type   | Collation | Nullable | Default
--------+---------+-----------+----------+---------
 c1     | integer |           |          |
 c2     | integer |           |          |
 c3     | integer |           |          |
Indexes:
    "test_include_c1_c2_idx" UNIQUE, lsm (c1) INCLUDE (c2)

-- Verify the included column is updated in both the base table and the index. Use WHERE condition
-- on c1 below to force the scan on the index vs. base table. Select the non-included column c3 in
-- the other case to force the use of sequential scan on the base table.
UPDATE test_include SET c2 = 22 WHERE c1 = 2;
EXPLAIN SELECT c1, c2 FROM test_include WHERE c1 > 0 ORDER BY c2;
                                               QUERY PLAN
---------------------------------------------------------------------------------------------------------
 Sort  (cost=53.84..56.34 rows=1000 width=8)
   Sort Key: c2
   ->  Index Only Scan using test_include_c1_c2_idx on test_include  (cost=0.00..4.01 rows=1000 width=8)
         Index Cond: (c1 > 0)
(4 rows)

EXPLAIN SELECT * FROM test_include ORDER BY c2;
                                 QUERY PLAN
----------------------------------------------------------------------------
 Sort  (cost=149.83..152.33 rows=1000 width=12)
   Sort Key: c2
   ->  Foreign Scan on test_include  (cost=0.00..100.00 rows=1000 width=12)
(3 rows)

SELECT c1, c2 FROM test_include WHERE c1 > 0 ORDER BY c2;
 c1 | c2
----+----
  1 |  1
  3 |  3
  2 | 22
(3 rows)

SELECT * FROM test_include ORDER BY c2;
 c1 | c2 | c3
----+----+----
  1 |  1 |  1
  3 |  3 |  3
  2 | 22 |  2
(3 rows)

UPDATE test_include SET c2 = NULL WHERE c1 = 1;
UPDATE test_include SET c2 = 33 WHERE c2 = 3;
DELETE FROM test_include WHERE c1 = 2;
SELECT c1, c2 FROM test_include WHERE c1 > 0 ORDER BY c2;
 c1 | c2
----+----
  3 | 33
  1 |
(2 rows)

SELECT * FROM test_include ORDER BY c2;
 c1 | c2 | c3
----+----+----
  3 | 33 |  3
  1 |    |  1
(2 rows)

